{"version":3,"sources":["Game.js","Store.js","Tutorial.js","Intro.js","App.js","index.js"],"names":["enter","pause","goldAfterEnemy","healthAfterEnemy","Store","onClose","onOpen","storeFunction","gold","difficulty","useState","response","setResponse","handleStore","selection","Dialog","open","style","color","backgroundColor","border","DialogTitle","DialogContent","Typography","gutterBottom","onClick","visibility","Tutorial","href","cardCounter","rand","max","Math","ceil","random","sleep","a","Promise","r","setTimeout","Game","health","setHealth","attack","setAttack","setGold","counter","setCounter","currentCard","setCurrentCard","commentary","setCommentary","enemyHealth","setEnemyHealth","storeOpen","setStoreOpen","tutorialOpen","setTutorialOpen","arr","randomIndex","currentIndex","length","floor","pop","map","el","clicked","display","selected","shuffle","pow","value","suit","cards","setCards","entranceCards","setEntranceCards","win","setWin","afterEnemyPickup","type","increase","cardToChange","indexOf","roll","damage","enemyDamage","copyOfCards","useEffect","every","card","className","i","abs","action","console","log","onCardClick","substring","filter","onEntranceCardClick","position","left","bottom","amount","price","Intro","to","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac38ef17.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport Store from './Store';\nimport Tutorial from './Tutorial';\n\nlet enter;\nlet pause;\nlet goldAfterEnemy;\nlet healthAfterEnemy;\nlet cardCounter = 0;\n// the fisher-yates shuffle algorithm\nconst shuffle = (arr) => {\n  let currentIndex = arr.length,\n    randomIndex;\n  // while there remain elements to shuffle\n  while (currentIndex !== 0) {\n    // pick a remaining element\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    // and swap it with the current element\n    [arr[currentIndex], arr[randomIndex]] = [\n      arr[randomIndex],\n      arr[currentIndex],\n    ];\n  }\n\n  enter = [arr.pop(), arr.pop()].map((el) => {\n    return { ...el, clicked: true, display: 'block', selected: false };\n  });\n  return arr;\n};\n\nconst rand = (max) => {\n  return Math.ceil(Math.random() * max);\n};\n\nconst sleep = async () => {\n  pause = true;\n  await new Promise((r) => setTimeout(r, 1500));\n  pause = false;\n};\n\nconst Game = ({ difficulty }) => {\n  const [health, setHealth] = useState(0);\n  const [attack, setAttack] = useState(0);\n  const [gold, setGold] = useState(0);\n  const [counter, setCounter] = useState(0);\n  const [currentCard, setCurrentCard] = useState(null);\n  const [commentary, setCommentary] = useState('roll for initial health');\n  const [enemyHealth, setEnemyHealth] = useState(0);\n  const [storeOpen, setStoreOpen] = useState(false);\n  const [tutorialOpen, setTutorialOpen] = useState(false);\n  const [cards, setCards] = useState(\n    shuffle([\n      {\n        pow: 2,\n        value: '2',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 3,\n        value: '3',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 4,\n        value: '4',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 5,\n        value: '5',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 6,\n        value: '6',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 7,\n        value: '7',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 8,\n        value: '8',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 9,\n        value: '9',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 10,\n        value: '10',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 11,\n        value: 'jack',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 12,\n        value: 'queen',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 13,\n        value: 'king',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 14,\n        value: 'ace',\n        suit: 'spades',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 2,\n        value: '2',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 3,\n        value: '3',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 4,\n        value: '4',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 5,\n        value: '5',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 6,\n        value: '6',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 7,\n        value: '7',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 8,\n        value: '8',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 9,\n        value: '9',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 10,\n        value: '10',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 11,\n        value: 'jack',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 12,\n        value: 'queen',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 13,\n        value: 'king',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 14,\n        value: 'ace',\n        suit: 'clubs',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 2,\n        value: '2',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 3,\n        value: '3',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 4,\n        value: '4',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 5,\n        value: '5',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 6,\n        value: '6',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 7,\n        value: '7',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 8,\n        value: '8',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 9,\n        value: '9',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 10,\n        value: '10',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 11,\n        value: 'jack',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 12,\n        value: 'queen',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 13,\n        value: 'king',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 14,\n        value: 'ace',\n        suit: 'hearts',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 2,\n        value: '2',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 3,\n        value: '3',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 4,\n        value: '4',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 5,\n        value: '5',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 6,\n        value: '6',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 7,\n        value: '7',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 8,\n        value: '8',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 9,\n        value: '9',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 10,\n        value: '10',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 11,\n        value: 'jack',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 12,\n        value: 'queen',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 13,\n        value: 'king',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n      {\n        pow: 14,\n        value: 'ace',\n        suit: 'diamonds',\n        clicked: false,\n        visibility: 'visible',\n      },\n    ]),\n  );\n  const [entranceCards, setEntranceCards] = useState(enter);\n  const [win, setWin] = useState(false);\n\n  const onCardClick = (card) => {\n    // flip over card\n    if (!card.clicked && !currentCard) {\n      // border check\n      const i = cards.indexOf(card);\n      if (\n        (cards[i + 1] && cards[i + 1].visibility === 'hidden') ||\n        (cards[i - 1] && cards[i - 1].visibility === 'hidden') ||\n        (cards[i + 10] && cards[i + 10].visibility === 'hidden') ||\n        (cards[Math.abs(i - 10)] &&\n          cards[Math.abs(i - 10)].visibility === 'hidden') ||\n        cardCounter === 0\n      ) {\n        let copyOfCards = [...cards];\n        let cardToChange = cards[cards.indexOf(card)];\n        cardToChange.clicked = true;\n        cards[cards.indexOf(card)] = cardToChange;\n        setCards(copyOfCards);\n        setCurrentCard(card);\n\n        // set up enemy health at card flip\n        if (card.suit === 'spades' || card.suit === 'clubs') {\n          setEnemyHealth(card.pow);\n        }\n\n        const action =\n          card.suit === 'hearts'\n            ? 'for health'\n            : card.suit === 'diamonds'\n            ? 'for gold'\n            : 'to attack';\n        setCommentary(`the ${card.value} of ${card.suit}. roll ${action}.`);\n        cardCounter++;\n      } else {\n        console.log(`can't pick that one`);\n      }\n    }\n  };\n\n  const onEntranceCardClick = (card) => {\n    if (!card.selected) {\n      let copyOfCards = [...entranceCards];\n      let cardToChange = entranceCards[entranceCards.indexOf(card)];\n      cardToChange.selected = true;\n      entranceCards[entranceCards.indexOf(card)] = cardToChange;\n      setEntranceCards(copyOfCards.filter((card) => card.selected));\n      setCurrentCard(card);\n\n      // set up enemy health at card flip\n      if (card.suit === 'spades' || card.suit === 'clubs') {\n        setEnemyHealth(card.pow);\n      }\n\n      const action =\n        card.suit === 'hearts'\n          ? 'for health'\n          : card.suit === 'diamonds'\n          ? 'for gold'\n          : 'to attack';\n      setCommentary(\n        `you selected the ${card.value} of ${card.suit}. roll ${action}.`,\n      );\n    }\n  };\n\n  const afterEnemyPickup = (type) => {\n    // handling enemy drops - follows after enemy defeat - not super dry\n    const increase = rand(currentCard.pow);\n    type === 'gold' ? setGold(gold + increase) : setHealth(health + increase);\n    setCommentary(`your ${type} increased by ${increase}`);\n    goldAfterEnemy = false;\n    healthAfterEnemy = false;\n\n    let cardToChange = entranceCards.length\n      ? entranceCards[entranceCards.indexOf(currentCard)]\n      : cards[cards.indexOf(currentCard)];\n    cardToChange.visibility = 'hidden';\n    cards[cards.indexOf(currentCard)] = cardToChange;\n\n    setCurrentCard(null);\n    setCards([...cards]);\n  };\n\n  const roll = async () => {\n    if (counter === 0) {\n      // initial health set\n      setHealth(rand(20));\n      setCommentary(`roll for initial attack power`);\n    } else if (counter === 1) {\n      // initial attack set\n      setAttack(rand(8));\n      setCommentary(`select one of the above cards to begin`);\n    } else {\n      if (currentCard && !pause) {\n        if (goldAfterEnemy) {\n          afterEnemyPickup('gold');\n        } else if (healthAfterEnemy) {\n          afterEnemyPickup('health');\n        } else {\n          const value = currentCard.pow;\n          if (currentCard.suit === 'diamonds') {\n            // get gold\n            const increase = rand(value);\n            setGold(gold + increase);\n            setCommentary(`your gold increased by ${increase}`);\n          } else if (currentCard.suit === 'hearts') {\n            // get health\n            const increase = rand(value);\n            setHealth(health + increase);\n            setCommentary(`your health increased by ${increase}`);\n          } else {\n            // battle sequence\n            const damage = rand(attack);\n            setEnemyHealth(enemyHealth - damage < 0 ? 0 : enemyHealth - damage);\n\n            if (enemyHealth - damage < 1 || !enemyHealth) {\n              // when enemy dies\n              setCommentary(`you dealt ${damage} damage.\n\t\t\t\t\t\t\t\tyou defeated the ${currentCard.value} of ${currentCard.suit}.\n\t\t\t\t\t\t\t\troll for ${currentCard.suit === 'clubs' ? 'gold' : 'health'}.`);\n              if (currentCard.suit === 'clubs') {\n                goldAfterEnemy = true;\n              } else {\n                healthAfterEnemy = true;\n              }\n            } else {\n              setCommentary(`you dealt ${damage} damage...`);\n              await sleep();\n              setCommentary(`the enemy is now attacking...`);\n              await sleep();\n              const enemyDamage = rand(value);\n              setHealth(health - enemyDamage < 0 ? 0 : health - enemyDamage);\n\n              if (health - enemyDamage < 1) {\n                // when player dies\n                setCommentary(\n                  `the enemy dealt ${enemyDamage} damage. you died. refresh to try again.`,\n                );\n                setEntranceCards([]); // to cover entrance\n                setCards([]);\n                pause = true; // game end\n              } else {\n                setCommentary(\n                  `the enemy dealt ${enemyDamage} damage. attack again.`,\n                ); // or roll away?\n              }\n            }\n          }\n\n          if (enemyHealth < 1) {\n            setCurrentCard(null);\n          }\n        }\n\n        if (currentCard.display && enemyHealth < 1 && health !== 0) {\n          // handle entrance card disappearing after 1.5 seconds\n          await sleep();\n          setCommentary(`entering the dungeon...`);\n          await sleep();\n          setEntranceCards([]);\n          setCommentary(`select any card to begin`);\n        } else {\n          // handle normal dissappearing of cards\n          if (enemyHealth < 1) {\n            let copyOfCards = [...cards];\n            let cardToChange = cards[cards.indexOf(currentCard)];\n            cardToChange.visibility = 'hidden';\n            cards[cards.indexOf(currentCard)] = cardToChange;\n            setCards(copyOfCards);\n          }\n        }\n      }\n    }\n\n    setCounter(counter + 1);\n  };\n\n  const handleStoreOpen = () => {\n    setStoreOpen(true);\n  };\n\n  const handleStoreClose = () => {\n    setStoreOpen(false);\n  };\n\n  const storeFunction = (type, amount, price) => {\n    if (type === 'attack') {\n      setAttack(attack + amount);\n    } else if (type === 'health') {\n      setHealth(health + amount);\n    }\n    setGold(gold - price);\n  };\n\n  const handleTutorialOpen = () => {\n    setTutorialOpen(true);\n  };\n\n  const handleTutorialClose = () => {\n    setTutorialOpen(false);\n  };\n\n  useEffect(() => {\n    if (cards.every((card) => card.visibility === 'hidden')) {\n      if (health > 0) {\n        setWin(true);\n      }\n    }\n  }, [health, cards]);\n\n  return (\n    <>\n      <h1 style={{ display: win ? 'block' : 'none' }}>bravo, you did it!</h1>\n      {!entranceCards.length && !win ? (\n        <div className='cards'>\n          {cards.map((card, i) => {\n            return (\n              <div\n                className='card'\n                key={i}\n                onClick={() => onCardClick(card)}\n                style={{ visibility: card.visibility }}\n              >\n                {card.clicked\n                  ? `${\n                      card.value === '10'\n                        ? card.value.substring(0, 2)\n                        : card.value[0]\n                    } ${card.suit[0]}`\n                  : ``}\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <></>\n      )}\n      {counter > 1 ? (\n        <div className='entrance-cards'>\n          {entranceCards.map((card, i) => {\n            return (\n              <div\n                className='card'\n                key={i}\n                onClick={() => onEntranceCardClick(card)}\n                style={{ display: card.display }}\n              >\n                {card.clicked\n                  ? `${\n                      card.value === '10'\n                        ? card.value.substring(0, 2)\n                        : card.value[0]\n                    } ${card.suit[0]}`\n                  : ``}\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <></>\n      )}\n      <div className='stats-container'>\n        <small className='stat'>health: {health}</small>\n        <small className='stat'>attack: {attack}</small>\n        <small className='stat'>gold: {gold}</small>\n        {enemyHealth ? (\n          <small className='stat'>enemy health: {enemyHealth}</small>\n        ) : (\n          <></>\n        )}\n      </div>\n      <div>\n        <small>\n          {win\n            ? 'refresh to play again, or try a different difficulty. thanks for playing!'\n            : commentary}\n        </small>\n      </div>\n      <div>\n        <button\n          onClick={roll}\n          style={{\n            display:\n              counter === 0 ? 'block' : health > 0 && !win ? 'block' : 'none',\n          }}\n        >\n          roll\n        </button>\n      </div>\n      <button\n        onClick={handleStoreOpen}\n        style={{\n          position: 'absolute',\n          left: 80,\n          bottom: 10,\n          display: win ? 'none' : 'block ',\n        }}\n      >\n        store\n      </button>\n      <button\n        onClick={handleTutorialOpen}\n        style={{ position: 'absolute', left: 10, bottom: 10 }}\n      >\n        help\n      </button>\n      <Store\n        onOpen={storeOpen}\n        onClose={handleStoreClose}\n        storeFunction={storeFunction}\n        gold={gold}\n        difficulty={difficulty}\n      />\n      <Tutorial onOpen={tutorialOpen} onClose={handleTutorialClose} />\n    </>\n  );\n};\n\nexport default Game;\n","import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from '@material-ui/core';\nimport './App.css';\n\nconst Store = ({ onClose, onOpen, storeFunction, gold, difficulty }) => {\n  const [response, setResponse] = useState();\n\n  const handleClose = () => {\n    setResponse(null);\n    onClose();\n  };\n\n  const handleStore = (selection) => {\n    if (difficulty === 'easy') {\n      if (selection === 1) {\n        if (gold >= 5) {\n          setResponse('success');\n          storeFunction('attack', 1, 5);\n        } else {\n          setResponse('notEnough');\n        }\n      } else if (selection === 2) {\n        if (gold >= 10) {\n          setResponse('success');\n          storeFunction('attack', 3, 10);\n        } else {\n          setResponse('notEnough');\n        }\n      } else if (selection === 3) {\n        if (gold >= 5) {\n          setResponse('success');\n          storeFunction('health', 10, 5);\n        } else {\n          setResponse('notEnough');\n        }\n      }\n    } else {\n      if (selection === 1) {\n        if (gold >= 10) {\n          setResponse('success');\n          storeFunction('attack', 1, 10);\n        } else {\n          setResponse('notEnough');\n        }\n      } else if (selection === 2) {\n        if (gold >= 20) {\n          setResponse('success');\n          storeFunction('attack', 3, 20);\n        } else {\n          setResponse('notEnough');\n        }\n      } else if (selection === 3) {\n        if (gold >= 5) {\n          setResponse('success');\n          storeFunction('health', 5, 5);\n        } else {\n          setResponse('notEnough');\n        }\n      }\n    }\n  };\n\n  return (\n    <Dialog onClose={handleClose} open={onOpen}>\n      <div\n        style={{\n          color: 'white',\n          backgroundColor: '#121E24',\n          border: '2px solid white',\n        }}\n      >\n        <DialogTitle>store</DialogTitle>\n        <DialogContent>\n          <Typography gutterBottom>\n            buy more attack power\n            <button onClick={() => handleStore(1)}>\n              +1 ({difficulty === 'easy' ? '5' : '10'} gold)\n            </button>\n            <button onClick={() => handleStore(2)}>\n              +3 ({difficulty === 'easy' ? '10' : '20'} gold)\n            </button>\n          </Typography>\n          <Typography gutterBottom>\n            buy more health\n            {difficulty === 'easy' ? (\n              <button onClick={() => handleStore(3)}>+10 (5 gold)</button>\n            ) : (\n              <button onClick={() => handleStore(3)}>+5 (5 gold)</button>\n            )}\n          </Typography>\n          <Typography gutterBottom>\n            {response === 'success' ? (\n              <small style={{ color: 'lightgreen' }}>success!</small>\n            ) : response === 'notEnough' ? (\n              <small style={{ color: 'red' }}>not enough gold</small>\n            ) : (\n              <small style={{ visibility: 'hidden' }}>-</small>\n            )}\n          </Typography>\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default Store;\n","import {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from '@material-ui/core';\n\nconst Tutorial = ({ onOpen, onClose }) => {\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    <Dialog onClose={handleClose} open={onOpen}>\n      <div\n        style={{\n          color: 'white',\n          backgroundColor: '#121E24',\n          border: '2px solid white',\n        }}\n      >\n        <DialogTitle>how to play</DialogTitle>\n        <DialogContent>\n          <Typography gutterBottom>\n            clear the dungeon of all its monsters and treasures!\n          </Typography>\n          <Typography gutterBottom>\n            begin by receiving an initial health value, randomly selected from\n            1-20, and an inital attack power value, randomly selected from 1-8.\n            the game is played out of a 52 standard card deck, shuffled up and\n            laid face-down in a 5*10 grid. the last 2 cards are presented to you\n            face-up at the beginning of the game as a \"soft\" entrance into the\n            dungeon - you select the one you want and the other is discarded.\n          </Typography>\n          <Typography gutterBottom>\n            you then flip over each card and interact with it to clear it. you\n            can only select those that are adjacent to an empty space except for\n            the first card. hearts give you more health and diamonds give you\n            more gold. you roll to determine how much health or gold you get\n            depending on the card's value. for example, if you encountered the 5\n            of hearts, you will receive an increase in health - randomly\n            selected from 1 to 5.\n          </Typography>\n          <Typography gutterBottom>\n            spades and clubs are the enemies of the dungeon. the health of an\n            enemy is equivalent to their card's value. the damage you do to an\n            enemy will be a random value between 1 and the value of your attack\n            power. the damage an enemy does to you will be a random value\n            between 1 and their card's value. a battle between an enemy will end\n            when their health reaches 0 or when your health reaches 0. when you\n            defeat a spade, roll for health, according to the card's value. when\n            defeating a club, roll for gold.\n          </Typography>\n          <Typography gutterBottom>\n            use the gold you earn at the shop to upgrade your attack power or\n            get more health. the difficulty of the game determines the prices at\n            the shop.\n          </Typography>\n          <Typography gutterBottom>\n            any questions or concerns, contact me at shaefferjd at gmail dot\n            com. the code for this project lives on{' '}\n            <a href='https://github.com/jdshaeffer/dungeon-solitaire'>github</a>\n            .\n          </Typography>\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default Tutorial;\n","import { Link } from 'react-router-dom';\nimport './App.css';\n\nconst Intro = () => {\n  return (\n    <>\n      <h1>welcome to dungeon solitaire (in beta)</h1>\n      <h3>pick a difficulty:</h3>\n      <div>\n        <Link to='/easy'>\n          <button>easy</button>\n        </Link>\n        <Link to='/hard'>\n          <button>hard</button>\n        </Link>\n      </div>\n    </>\n  );\n};\n\nexport default Intro;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Game from './Game';\nimport Intro from './Intro';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Router>\n          <Switch>\n            <Route exact path='/dungeon-solitaire'>\n              <Intro />\n            </Route>\n            <Route path='/easy'>\n              <Game difficulty='easy' />\n            </Route>\n            <Route path='/hard'>\n              <Game difficulty='hard' />\n            </Route>\n          </Switch>\n        </Router>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}